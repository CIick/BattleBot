We should only put a spell_effects class element into the spell_effects table if the class type is a "$__type": "class SpellEffect", otherwise we need specific handling for each type of nested effect. I will provide you example cards. Below here and describe the structure I’m seeing and assumptions we should be making.

C:\Github Repos Python\BattleBots\Reference SpellClass Examples\Arch Master.json

Arch Master.json card m_effects contains "$__type": "class ConditionalSpellEffect", the class ConditionalSpellEffect has m_elements which its self has  "$__type": "class ConditionalSpellElement", which its self has m_pEffect which contains EffectListSpellEffect which contains m_effectList which contains multiple "$__type": "class SpellEffect", 4 to be exact but assume there can be more. ConditionalSpellElement also has m_pReqs which contains "$__type": "class RequirementList", which contains m_requirements and m_requirements contains "$__type": "class ReqIsSchool". If you see any more nesting inform me.

In total there are ConditionalSpellElement contained inside m_elements which its self is contained inside m_effects.


Reference the file C:\Github Repos Python\BattleBots\Reference SpellClass Examples\Arch Master.json and make sure the DTO Structure matches. We might need to make more DTO’s for each nested value.


So I think the logic should be for this is each nested, per card, we make a link back to the original card with a table matching the class name? What do you think about this idea is there any better way to do this?
—--------------------------------------
C:\Github Repos Python\BattleBots\Reference SpellClass Examples\3P Bloodbat - Amulet.json


3P Bloodbat - Amulet’s m_effects contains a       "$__type": "class RandomSpellEffect". This random spell effect class contains m_effectList which contains multiple "$__type": "class SpellEffect", 5 to be exact but assume there could be more or less. Make it dynamic.


Reference the file C:\Github Repos Python\BattleBots\Reference SpellClass Examples\3P Bloodbat - Amulet.json and make sure the DTO Structure matches. We might need to make more DTO’s for each nested value.
—-----------------------------------------
C:\Github Repos Python\BattleBots\Reference SpellClass Examples\4P Supernova - Amulet.json


4P Supernova - Amulet.json is a base class of "$__type": "class SpellTemplate", which has m_effects. The m_effects contains "$__type": "class EffectListSpellEffect", which has m_effectList which contains two "$__type": "class SpellEffect", to be exact but assume there could be more or less. Make it dynamic.


Reference the file C:\Github Repos Python\BattleBots\Reference SpellClass Examples\4P Supernova - Amulet.json and make sure the DTO Structure matches. We might need to make more DTO’s for each nested value.
—--------------------------------------
C:\Github Repos Python\BattleBots\Reference SpellClass Examples\Aeon of Atavus - Devour - Late.json


Aeon of Atavus - Devour - Late.json is the base class   "$__type": "class SpellTemplate", it contains m_effects which contains    1   "$__type": "class DelaySpellEffect", and 10       "$__type": "class SpellEffect",


Reference the file C:\Github Repos Python\BattleBots\Reference SpellClass Examples\Aeon of Atavus - Devour - Late.json and make sure the DTO Structure matches.
—--------------------------------------
C:\Github Repos Python\BattleBots\Reference SpellClass Examples\Animate - Amulet.json


Animate - Amulet.json is a   "$__type": "class SpellTemplate", base class with m_effects. M_effects contains one object       "$__type": "class VariableSpellEffect", which contains a m_effectList. The m_effectList contains 14           "$__type": "class SpellEffect". Assume there can be more or less than this amount make it dynamic.


Reference the file C:\Github Repos Python\BattleBots\Reference SpellClass Examples\Animate - Amulet.json and make sure the DTO Structure matches.
—--------------------------------------
C:\Github Repos Python\BattleBots\Reference SpellClass Examples\Blade Dance - Amulet.json


Blade Dance - Amulet.json is a base class   "$__type": "class SpellTemplate" which contains  m_effects. M_effects holds two       "$__type": "class RandomPerTargetSpellEffect", assume there can be more or less, make it dynamic.       "$__type": "class RandomPerTargetSpellEffect" has m_effectList contains 7           "$__type": "class SpellEffect", assume there can be more or less, make it dynamic.


Reference the file C:\Github Repos Python\BattleBots\Reference SpellClass Examples\Blade Dance - Amulet.json and make sure the DTO Structure matches.
—----------------------------------------
C:\Github Repos Python\BattleBots\Reference SpellClass Examples\Buck Gordon - Accompany.json


Buck Gordon - Accompany.json is a base class of   "$__type": "class SpellTemplate", which contains m_effects. M_effects contains two elements one is    of the type   "$__type": "class SpellEffect", and one is    of the type   "$__type": "class HangingConversionSpellEffect".  HangingConversionSpellEffect contains m_outputEffect which contains           "$__type": "class SpellEffect"


Reference the file C:\Github Repos Python\BattleBots\Reference SpellClass Examples\Buck Gordon - Accompany.json and make sure the DTO Structure matches.
—-------------------------------------------
C:\Github Repos Python\BattleBots\Reference SpellClass Examples\Mithraya - Forest Lord - Sun.json


Mithraya - Forest Lord - Sun.json is of the base class   "$__type": "class SpellTemplate", and has the element m_effects. M_effects contains one       "$__type": "class TargetCountSpellEffect", which contains m_effectLists. m_effectLists contains 4           "$__type": "class EffectListSpellEffect", which has the element m_effectList which contains one               "$__type": "class SpellEffect", Assume there could be more or less. Make it dynamic.


Reference the file C:\Github Repos Python\BattleBots\Reference SpellClass Examples\Mithraya - Forest Lord - Sun.json and make sure the DTO Structure matches.
—------------------------------------------
C:\Github Repos Python\BattleBots\Reference SpellClass Examples\Morganthe - Shadow Creature Big Bomb.json


Morganthe - Shadow Creature Big Bomb.json is of the base class   "$__type": "class SpellTemplate" which has m_effects. M_effects contains two elements.       "$__type": "class SpellEffect" and       "$__type": "class ShadowSpellEffect". Assume there can be more or less make it dynamic.       "$__type": "class ShadowSpellEffect", contains m_effectList which contains one value           "$__type": "class SpellEffect", Assume there can be more or less make it dynamic.


Reference the file C:\Github Repos Python\BattleBots\Reference SpellClass Examples\Morganthe - Shadow Creature Big Bomb.json and make sure the DTO Structure matches.
—------------------------------------------
C:\Github Repos Python\BattleBots\Reference SpellClass Examples\R7 - Sound of Musicology - Star - MOB ONLY.json


R7 - Sound of Musicology - Star - MOB ONLY.json is of the base type   "$__type": "class SpellTemplate" which contains m_effects. M_effects contains  two elements. One being       "$__type": "class RandomSpellEffect", and the other being       "$__type": "class CountBasedSpellEffect". Assume there can be more or less, make it dynamic.       "$__type": "class CountBasedSpellEffect", contains m_effectList which contains     7      "$__type": "class SpellEffect", Assume there can be more or less, make it dynamic.


Reference the file C:\Github Repos Python\BattleBots\Reference SpellClass Examples\R7 - Sound of Musicology - Star - MOB ONLY.json and make sure the DTO Structure matches.
—--------------------------------------
C:\Github Repos Python\BattleBots\Reference SpellClass Examples\0P Minotaur - MOB.json


0P Minotaur - MOB.json is of the base class   "$__type": "class SpellTemplate", which contains m_effects. M_effects has two elements. One being       "$__type": "class SpellEffect", and the other being       "$__type": "class SpellEffect". Assume it can have more or less and make it dynamic.


Reference the file C:\Github Repos Python\BattleBots\Reference SpellClass Examples\0P Minotaur - MOB.json and make sure the DTO Structure matches.